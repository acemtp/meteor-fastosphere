#!/usr/bin/env node

var table = require('text-table');
var program = require('commander');
var moment = require('moment');
var fs = require('fs');
var path = require('path');
var request = require('request');
var marked = require('marked');
var terminal = require('marked-terminal');

var Algolia = require('algolia-search');

program
  .version('1.0.2')
  .usage('[options] <search ...>')
  .description('Blazing fast Meteor packages search cli powered by Algolia.')
  .option('-g, --github', 'display GitHub url')
  .option('-n, --nbhits <n>', 'number of results (default: 10)', parseInt)
  .option('-l, --long', 'list in long format');

program.on('--help', function () {
  console.log('  Examples:');
  console.log('');
  console.log('    $ fastosphere acemtp -g   # Display GitHub link (⌘  + click on it to open the url)');
  console.log('    $ fastosphere acemtp -l   # Display in long format');
  console.log('    $ fastosphere boot -n 20  # Display 20 results');
  console.log('');
});

program.parse(process.argv);



if (program.args.length) {
  var client = new Algolia('10L80F1AT7', 'b72cb5333cc8de90e7217eee27c48c63');

  var index = client.initIndex('Packages');

  var nbhits = program.nbhits || 10;

  index.search(program.args, function (error, content) {

    if(error) return console.error('Error:', content.message);

  //  console.log(content.hits);
    var hits = [];
    content.hits.forEach(function (h) {
      var a = [];

      a.push(h.starCount ? h.starCount + '★' : '');

      a.push(h.name);

      if(program.long) a.push(h.latestVersion.version || '');

      if(program.long) a.push(moment(h.latestVersion.published).fromNow());

      var desc = h.latestVersion.description;
      var width = program.github ? 50 : 80;
      if (desc.length > width) {
        desc = desc.substr(0, width - 3) + '...';
      }
      a.push(desc);

      if(program.github) a.push(h.latestVersion.git || '');

      hits.push(a);
    });

    console.log(table(hits));

  }, { hitsPerPage: nbhits });

} else {
  // look for a .meteor/version
  try {
    var versions = fs.readFileSync(path.join('.meteor', 'versions'), {encoding: 'ascii'});
    var release = fs.readFileSync(path.join('.meteor', 'release'), {encoding: 'ascii'});

  } catch (e) {
    console.error(e);
  }
  // send file to server.
  request.post({
    url: 'http://localhost:3000/api/changelog',
    json: {
      versions: release + versions
    }
  }, function(err,httpResponse,body){
    if (err) {
      return console.error('error:', err);
    }

// patch marked-terminal because listitem doesn't escape html code
function unescapeEntities(html) {
  return html
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'");
}

function tab(size) {
  size = size || 4;
  return (new Array(size)).join(' ');
}

terminal.prototype.listitem = function(text) {
  var e = this.o.unescape ? unescapeEntities : identity;
  return tab() + this.o.listitem('* ' + e(text)) + '\n';
};

    marked.setOptions({
      // Define custom renderer
      renderer: new terminal()
    });
    // avoid marked to crash
    body.links = {};

    console.log(marked.parser(body));
  });

}
